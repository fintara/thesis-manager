<?php
/**
 * Created by PhpStorm.
 * User: fintara
 * Date: 17/01/2017
 * Time: 15:46
 */

namespace AppBundle\DataFixtures\ORM;


use AppBundle\Entity\Reservation;
use AppBundle\Entity\Student;
use AppBundle\Entity\Thesis;
use AppBundle\Entity\Topic;
use Doctrine\Common\DataFixtures\AbstractFixture;
use Doctrine\Common\DataFixtures\OrderedFixtureInterface;
use Doctrine\Common\Persistence\ObjectManager;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Symfony\Component\DependencyInjection\ContainerAwareTrait;

class LoadThesisData extends AbstractFixture
implements OrderedFixtureInterface, ContainerAwareInterface
{
    use ContainerAwareTrait;
    /**
     * @var ObjectManager
     */
    private $om;

    public function load(ObjectManager $manager)
    {
        $this->om = $manager;
        $theses = [
            -1 => ['student' => 2, 'topic' => 1, 'res' => Reservation::STATUS_REJECTED, 'final' => false],
            1 => ['student' => 2, 'topic' => 2, 'res' => Reservation::STATUS_APPROVED, 'final' => false],
            2 => ['student' => 3, 'topic' => 3, 'res' => Reservation::STATUS_APPROVED, 'final' => false],
            3 => ['student' => 3, 'topic' => 4, 'res' => Reservation::STATUS_APPROVED, 'final' => true],
            4 => ['student' => 4, 'topic' => 6, 'res' => Reservation::STATUS_APPROVED, 'final' => true],
            5 => ['student' => 5, 'topic' => 7, 'res' => Reservation::STATUS_APPROVED, 'final' => true],
            6 => ['student' => 6, 'topic' => 8, 'res' => Reservation::STATUS_APPROVED, 'final' => true],
            7 => ['student' => 7, 'topic' => 10, 'res' => Reservation::STATUS_APPROVED, 'final' => true],
        ];

        foreach ($theses as $key => $thesisData) {
            $reservation = $this->createReservation($thesisData);

            if ($thesisData['res'] === Reservation::STATUS_APPROVED) {
                $thesis = $this->createThesis($thesisData);
                $this->addReference('thesis-'.$key, $thesis);
            }
        }

        $this->om->flush();
    }

    protected function createThesis(array $data): Thesis
    {
        /** @var Student $student */
        $student = $this->getReference('student-'.$data['student']);

        $t = new Thesis();

        /** @var Topic $topic */
        $topic = $this->getReference('topic-'.$data['topic']);


        $t->setTopic($topic);
        $t->setTitle($topic->getTitle());
        $t->setStatus($data['final'] ? Thesis::STATUS_FINAL : Thesis::STATUS_DRAFT);
        $t->addStudent($student);

        $student->addThesis($t);

        $this->om->persist($t);
        $this->om->persist($student);

        return $t;
    }

    protected function createReservation(array $data): Reservation
    {
        $r = new Reservation();

        /** @var Topic $topic */
        $topic = $this->getReference('topic-'.$data['topic']);

        /** @var Student $student */
        $student = $this->getReference('student-'.$data['student']);

        $status = $data['res'];

        $r->setStatus($status);
        $r->setStudent($student);
        $r->setTopic($topic);
        $r->setCreatedAt(new \DateTime());

        $this->om->persist($r);

        return $r;
    }

    public function getOrder()
    {
        return 3;
    }
}
